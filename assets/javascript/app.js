
multipeChoiceQuestion = [
    {
        question: "What are the events generated by the Node objects called?",
        options: ["generators", "emitters", "dispatchers", "highevents"],
        answer: "emitters",
        expl: "emitThere are two classes of events one is called event listener and the other is called event emitter. Node objects that generate events (known as event emitters) define an on() method for registering handlers.ters"
    },
    {
        question: "What is the function used to deregister event handler ‘f’?",
        options: ["deleteAllListeners(name)", "deleteListener(name,f)", "removeListener(name,f)", "removeAllListeners(name)"],
        answer: "removeListener(name,f)",
        expl: "The removeEventListener() method removes an event handler that has been attached with the addEventListener() method. The removeListeners(name,f) is used to deregister event handler f represented as :emitter.removeListener(name,f)"
    },
    {
        question: "Which function is a synonym for on()?",
        options: ["addListener()", " listeners()", "once()", "add()"],
        answer: "addListener()",
        expl: "The on() method is used for registering handlers. addListener() is a synonym for on()."
    },
    {
        question: "Which of the following is an event emitter?",
        options: [" once", "process", "listeners", "on"],
        answer: "listeners",
        expl: "The process object is an event emitter. The Node defines other important globals under the process namespaces that contain properties of that object like version, argv, env, pid,getuid(), cwd(), chdir() and exit()."
    },
    {
        question: "When do uncaught exceptions generate events?",
        options: ["When handlers are registered", "When handlers are deregistered", "When handler functions are called", "When handlers do not have a matching catch clause"],
        answer: "When handlers are registered",
        expl: ""
    },
    {
        question: "Which among the following POSIX signals generate events?",
        options: ["SIGDOWN", "SIGFLOAT", "SIGINT", "SIGSHORT"],
        answer: "SIGINT",
        expl: ""
    },
    // {
    //     question:"",
    //     options: ["", "", "", ""],
    //     answer: "",
    //     expl: ""
    // }

]

//global variable here
let timeInterQuestId, maxTimeoutId = 0;
let question = "";
let counter = 0;
let alreadyGene = [];
const ImgTimeOut = "https://media.giphy.com/media/EaxciIRvOziSY/giphy.gif";
const ImgWrongAnswer = "https://media.giphy.com/media/l4FGsc1IthILA1esE/giphy.gif";
const ImgCorrectAnswer ="https://media.giphy.com/media/k48soGtCrLqZq/giphy-downsized.gif";
const textTimeOut = "Ooupsss, Time Out!";
const textWrongOut = "Sorry, your answer is not corret!";
const textCorrectOut = "Good Job, You got right!";


function getOptions(options) {
    return options.map(function (opt) {
        console.log(opt);
        return `
        <div class="card btnOption" data-option=${opt}>
            <div class="card-body"> ${opt}</div>
        </div>`
    });
}

function QuestionGenerator() {
    let ind = Math.floor(Math.random() * multipeChoiceQuestion.length);
    while (alreadyGene.length < multipeChoiceQuestion.length && alreadyGene.includes(ind)) {
        ind = Math.floor(Math.random() * multipeChoiceQuestion.length);
    }
    console.log("ind = " + ind);
    alreadyGene.push(ind);
    if (alreadyGene.length > multipeChoiceQuestion.length) {
        return null;
    } else {
        return multipeChoiceQuestion[ind];
    }

}

function displayQuestion(counter, question) {
    
    if (question) {
        return `
        <div>
            <div class="card questionBlock">
                <div class="card-body">
                    <h4 class="card-title">Time Remaining is 
                        <span class="badge badge-primary timeRem">${counter}</span>
                        seconds
                    </h4>
                    <p class="card-text">${question.question}</p>
                </div>
            </div>
            <div>
                ${getOptions(question.options)}
            </div>
        </div>`;
    }else{
        return `
        <div><h3>game over!</h3></div>`;
    }
}


function gameInitialization() {
    counter = 10;
    question = QuestionGenerator();
    $("#main").html(displayQuestion(counter, question));
    timeInterQuestId = setInterval(function () {
        counter--;
        $(".timeRem").text(counter);
    }, 1000);
    
    maxTimeoutId = setTimeout(function () {
        clearInterval(timeInterQuestId);
        $("#main").html(displaySolution(question.answer, textTimeOut, ImgTimeOut));
        setTimeout(function () {
            clearTimeout(maxTimeoutId);
            gameInitialization();
        }, 2000);
    }, 10000);
}

function displaySolution(answer, textdesc, imgurl){
    return(  
    `<div class="card">
        <div class="card-body">
            <h3 class="card-title">${textdesc}</h3>
            <p class="card-text">The solution is :${answer}</p>
        </div>
        <img class="card-img-bottom imgSolution" src=${imgurl} alt="Card image" >
    </div>` );
}


$(document).ready(function () {


    $("#main").on("click", ".start", function () {
        gameInitialization();
    });

    $("#main").on("click", ".btnOption", function () {
        clearInterval(timeInterQuestId);
        clearTimeout(maxTimeoutId);
        $(".btnOption").attr("disabled", "true");
        let userAnswer = $(this).attr("data-option");
        if (userAnswer === question.answer && counter > 0) {
            $("#solution").html(correctAnswerHtml(question.answer));
            setTimeout(function () {
                gameInitialization();
            }, 3000);
        } else {
            $("#solution").html(wrongAnswerHtml());
            setTimeout(function () {
                gameInitialization();
            }, 3000);
        }
    });


    

});